struct Foo {
    int32 n;
    mut []int32 array;
    bool b;
    const ref int32 r;

    func static new(const ref int32 a, mut []int32 array) Foo {
        return Foo {
            n: 5,
            array: array,
            b: false,
            r: a
        };
    }

    func const print() {
        printf("Foo {\n");
        printf("  n: %d,\n", n);
        printf("  array: [ ");
        for mut uint32 i := uint32(0); i < array.length; i++ {
            printf("%d ", array[i]);
        }
        printf("],\n");
        printf("  b: ");
        if b {
            printf("true,\n");
        }
        else {
            printf("false,\n");
        }
        printf("  r: %d\n}\n", r);
    }
}

struct Bar {
    Foo foo;
}

class MyClass { int32 i; }

func main() int32 {
    const []uint8 hello := "hello, world!";
    print_string(hello);

    const int32 a := 5 * 5;
    // a := 6; // doesn't compile
    print_number(a);

    mut int8 b := int8(126);
    print_number(int32(b));

    b := int8(19);
    print_number(int32(b));

    test_else_if();
    test_for();
    test_while();
    test_do_while();
    test_parenthesis_expressions();
    test_arrays();
    test_struct();

    return 0;
}

// func errors() uint32 {
//     print_number(true);
//     const int32 a := 5;
//     a := 6;
//     if (3){}
//     b := 123;
//     const int8 a := int8(2);
//     switch a {
//         case b {}
//     }
//     return false;
// }

func test_else_if() {
    mut int32 a := 0;
    if a == 1 { print_number(1); }
    else if a == 2 {
        if true {
            print_number(2);    
        } 
        else if true {
            if false {}        
        }
        else {}
    }
    else if a == 3 { print_number(3); }
    else { print_number(4); }
}

func test_parenthesis_expressions() {
    if 2 * 4 + 1 != 9 {
        printf("2 * 4 + 1 != 9!\n");
    }
    else if 2 * (4 + 1) != 10 {
        printf("2 * (4 + 1) != 10!\n");
    }
    const int32 lisp := ((((returns_5()) + ((6)))) + (1));
    if lisp != 12 {
        printf("lisp != 12!\n");
    }
}


func test_while() {
    mut int32 i := 0;
    while i < 10 {
	i++;
        }
        
    print_number(i);
    i := i + 1;
}


func test_for() {
	for mut int32 i:=0; i<3; i+=1 {
		for mut int32 j:=0; j<3; j+=1 {
			printf("i:= %d j:= %d \n", i, j);
		}
	}
}

func test_do_while() {
    mut bool test := false;
    
    do {
        test := true;
    } while false;
    
    if !test {
        printf("Do While doesn't work!");
    }
}

func test_arrays() {
    mut []int32 array := [1, 2];

    mutate_array(array);
    printf("[");
    for mut uint32 i := uint32(0); i < array.length; i++ {
        const int32 value := array[i];
        printf("%d, ", int32(array[i]));
    }
    printf("]\n");

    const [][]int32 matrix := [[1, 2, 3], [4, 5, 6, 98], [7, 8, 9]];
    printf("[\n");
    for mut uint32 i := uint32(0); i < matrix.length; i++ {
        printf("  [ ");
        for mut uint32 j := uint32(0); j < matrix[i].length; j++ {
            const int32 value := matrix[i][j];
            printf("%d, ", value);
        }
        printf("],\n");
    }
    printf("]\n");
}

func mutate_array(mut []int32 array){
    array[0] := 100;
}

func test_struct() {
    const int32 a := 255;
    mut Foo foo := Foo::new(ref a, [1, 2, 3]);
    mut Bar bar := Bar{foo: foo};

    foo.n := 6;
    foo.print();
    test_struct_param(bar);
    Foo::new(ref a, [5]).print();

    mut []MyClass myClasses := [MyClass{i: 0}, MyClass{i: 0}];
    for mut uint32 i := uint32(0); i < myClasses.length; i++ {
        myClasses[i].i := int32(i);
        print_number(myClasses[i].i);
    }
}

func test_struct_param(const Bar bar) {
    bar.foo.print();
}

func print_number(const float64 f) {
	printf("n := %f\n", f);
}

func print_number(const int32 n) {
    printf("n := %d\n", n);
}

func print_number(const uint32 n) {
    printf("n := %d\n", n);
}

func print_string(const []uint8 s) {
    printf("%s\n", s);
}

func returns_5() int32 {
    return 5;
}
